#include<bits/stdc++.h>
using namespace std;

bool isQueenSafe(vector<vector<bool>> &chess,int row,int col){
    //vertical check
    for(int i=row-1,j=col;i>=0;i--){
        if(ch ess[i][j])
        return false;
    }
    
    //horizontal check
    for(int i=row,j=col-1;j>=0;j--){
         if(chess[i][j])
        return false;
    }
    
    //left Diagonal
    for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
         if(chess[i][j])
        return false;
    }
    
    //right diagonal
    for(int i=row-1,j=col+1;i>=0&&j<chess.size();i--,j++){
         if(chess[i][j])
        return false;
    }
    return true;
    
}

//lcno -> last cell no in which queen is placed
void queenCombinations(int qpsf,int tq,vector<vector<bool>> &chess,int lcno){
    
    //base case
    if(qpsf==tq){
        for(int i=0;i<chess.size();i++){
            for(int j=0;j<chess.size();j++){
                if(chess[i][j])
                cout<<"q\t";
                else
                cout<<"-\t";
        }
        cout<<endl;
        }
        cout<<endl;
        return;
    }
    
    //queen jaha baith chuki hai uske aage aage loop lagaenge
    for(int cell=lcno+1;cell<chess.size()*chess.size();cell++){
        int row=cell/chess.size();
        int col=cell%chess.size();
        if(chess[row][col]==false && isQueenSafe(chess,row,col)){
            chess[row][col]=true;
            queenCombinations(qpsf+1,tq,chess,cell);
            chess[row][col]=false;
        }
    }
}

int main(){
    int n;
    cin>>n;
    vector<vector<bool>> chess(n,vector<bool>(n,false));
    queenCombinations(0,n,chess,-1);
    return 0;
}