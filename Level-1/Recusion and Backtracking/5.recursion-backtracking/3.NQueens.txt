#include<iostream>
#include<vector>
using namespace std;

bool isSafe(vector<vector<int>> chess,int row,int col){
    //vertical check
    for(int i=row-1,j=col;i>=0;i--){
        if(chess[i][j]==1)
        return false;
    }
    
     //left diagonal  check
    for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
        if(chess[i][j]==1)
        return false;
    }
    
    //right diagonal  check
    for(int i=row-1,j=col+1;i>=0 && j<chess.size();i--,j++){
        if(chess[i][j]==1)
        return false;
    }
    
    return true;
}

void printNQueen(vector<vector<int>> chess,string asf,int row){
    if(row==chess.size()){
        cout<<asf<<"."<<endl;
        return;
    }
    
    //exploring options
    for(int col=0;col<chess.size();col++){
        if(chess[row][col]==0 && isSafe(chess,row,col)==true){
            chess[row][col]=1;
            printNQueen(chess,asf+to_string(row)+"-"+to_string(col)+", ",row+1);
            chess[row][col]=0;
        }
    }
}

int main(){
    int n;
    cin>>n;
    vector<vector<int>> chess(n,vector<int> (n,0));
    printNQueen(chess,"",0);
    return 0;
}